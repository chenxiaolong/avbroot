name: CI
on: pull_request

env:
  test-db-path: tests_ci/test_db.toml

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  setup:
    name: Prepare workflow data
    runs-on: ubuntu-latest
    timeout-minutes: 2
    permissions:
      # Default
      contents: read
      packages: read
      # Custom, for API cache access
      actions: read
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      device-db: ${{ steps.load-db.outputs.device-db }}
      device-list: ${{ steps.load-db.outputs.device-list }}
      magisk-key: ${{ steps.get-magisk-cache.outputs.magisk-key }}
      magisk-url: ${{ steps.load-db.outputs.magisk-url }}
      hit-img: ${{ steps.get-img-cache.outputs.img-hit }}
      hit-tox: ${{ steps.get-tox-cache.outputs.tox-hit }}
    steps:
      - uses: actions/checkout@v3
      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: python3-tomlkit
      - name: Checking for cached tox environments
        id: get-tox-cache
        run: |
          echo "tox-hit=$(gh api \
            --method GET \
            -H 'Accept: application/vnd.github+json' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            -f 'key=tox-${{ hashFiles('tox.ini') }}-py3' \
            /repos/${{ github.repository }}/actions/caches)" >> $GITHUB_OUTPUT
      - name: Checking for cached device images
        id: get-img-cache
        run: |
          echo "img-hit=$(gh api \
            --method GET \
            -H 'Accept: application/vnd.github+json' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            -f 'key=img-v2-${{ hashFiles(env.test-db-path) }}-' \
            /repos/${{ github.repository }}/actions/caches)" >> $GITHUB_OUTPUT
      - name: Checking for cached magisk apk
        id: get-magisk-cache
        env:
          magisk-key: magisk-${{ hashFiles(env.test-db-path) }}
        run: |
          echo "magisk-key=${{ env.magisk-key }}" >> $GITHUB_OUTPUT
          echo "magisk-hit=$(gh api \
            --method GET \
            -H 'Accept: application/vnd.github+json' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            -f 'key=${{ env.magisk-key }}' \
            /repos/${{ github.repository }}/actions/caches)" >> $GITHUB_OUTPUT
      - name: Loading device test database
        id: load-db
        shell: python
        run: |
          import os
          import tomlkit

          with open('${{ env.test-db-path }}') as f:
            db = tomlkit.load(f)

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"device-db={db['device']}" + '\n')
            f.write(f"device-list={[i for i in db['device']]}" + '\n')
            f.write(f"magisk-url={db['magisk']['url']}" + '\n')
      - uses: ./.github/actions/preload-magisk-cache
        if: ${{ fromJSON(steps.get-magisk-cache.outputs.magisk-hit).total_count == 0 }}
        with:
          cache-key: ${{ steps.get-magisk-cache.outputs.magisk-key }}
          url: ${{ steps.load-db.outputs.magisk-url }}

  preload-img:
    name: Preload device images
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    # Assume that preloading always succesfully cached all images before.
    # If for some reason only some got cached, on the first run, the cache will not be preloaded
    # which will result in some being downloaded multiple times when running the tests.
    if: ${{ fromJSON(needs.setup.outputs.hit-img).total_count == 0 }}
    strategy:
      matrix:
        device: ${{ fromJSON(needs.setup.outputs.device-list) }}
    env:
      filename: ${{ fromJSON(needs.setup.outputs.device-db)[matrix.device]['filename'] }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: ./.github/actions/preload-img-cache
        with:
          device: ${{ matrix.device }}
          filename: ${{ env.filename }}
          test-db-path: ${{ env.test-db-path }}

  preload-tox:
    name: Preload tox environments
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    # Assume that preloading always succesfully cached all tox environments before.
    # If for some reason only some got cached, on the first run, the cache will not be preloaded
    # which will result in some being downloaded multiple times when running the tests.
    if: ${{ fromJSON(needs.setup.outputs.hit-tox).total_count == 0 }}
    strategy:
      matrix:
        python: [py39, py310, py311]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/preload-tox-cache
        with:
          python-version: ${{ matrix.python }}
      - name: Generating tox environment
        run: tox -e ${{ matrix.python }} --notest

  tests:
    name: Run test for ${{ matrix.device }} with ${{ matrix.python }}
    runs-on: ubuntu-latest
    needs: [setup, preload-img, preload-tox]
    timeout-minutes: 5
    # Continue on skipped but not on failures or cancels
    if: ${{ always() && ! failure() && ! cancelled() }}
    strategy:
      matrix:
        device: ${{ fromJSON(needs.setup.outputs.device-list) }}
        python: [py39, py310, py311]
    env:
      filename: ${{ fromJSON(needs.setup.outputs.device-db)[matrix.device]['filename'] }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: ./.github/actions/preload-magisk-cache
        with:
          cache-key: ${{ needs.setup.outputs.magisk-key }}
          url: ${{ needs.setup.outputs.magisk-url }}
      - uses: ./.github/actions/preload-img-cache
        with:
          device: ${{ matrix.device }}
          filename: ${{ env.filename }}
          test-db-path: ${{ env.test-db-path }}
      - uses: ./.github/actions/preload-tox-cache
        with:
          python-version: ${{ matrix.python }}

      # Finally run tests
      - name: Run test for ${{ matrix.device }} with ${{ matrix.python }}
        run: tox -e ${{ matrix.python }} -- -d ${{ matrix.device }} --db ${{ env.test-db-path }} --workdir workdir
